---

fasteners_version: '0.14.1'
fasteners_download_url: 'https://github.com/harlowja/fasteners/archive/{{ fasteners_version }}.tar.gz'
fasteners_workspace: '/opt/'


- name: 'Define facts'
  set_fact:
    fasteners_unarchive_dir: '{{ fasteners_workspace }}/fasteners-{{ fasteners_version }}'



- name: Check if is installed

- name: 'Create fasteners workspace'
  file:
    path: "{{ fasteners_workspace }}"
    state: directory
  when: duplicity_version != duplicity_current_version

- name: 'Unarchive fasterners.tar.gz'
  register: duplicity_unarchive
  unarchive:
    src: '{{ fasteners_download_url }}'
    dest: '{{ fasteners_workspace }}/'
    copy: no
  when: duplicity_version != duplicity_current_version

- name: setup fasteners
  command:
  args:
    chdir: '{{ fasteners_workspace }}'
  
  

- name: 'Define facts'
  set_fact:
    duplicity_unarchive_dir: '{{ duplicity_workspace }}/duplicity-{{ duplicity_version }}'
    duplicity_current_version: ''
    fasteners_workspace: ''

- name: 'Get current duplicity version'
  command: duplicity --version
  register: duplicity_current_version_output
  changed_when: false
  ignore_errors: true

- name: 'Define duplicity_current_version variable'
  set_fact:
    duplicity_current_version: "{{ duplicity_current_version_output.stdout_lines[0] | replace('This is Monit version ', '') }}"
  when: duplicity_current_version_output.stdout_lines[0] is defined
  ignore_errors: true

- name: 'Output duplicity_version != duplicity_current_version'
  debug: msg="{{ duplicity_version }} != {{ duplicity_current_version }}"


#- name: 'Download duplicity'
#  get_url:
#    url: '{{duplicity_download_url }}'
#    dest: '{{ duplicity_workspace }}/duplicity-latest.tar.gz'
#  when: duplicity_version != duplicity_current_version
#
#- name: 'Unarchive duplicity-latest.tar.gz'
#  register: duplicity_unarchive
#  unarchive:
#    src: '{{ duplicity_workspace }}/duplicity-latest.tar.gz'
#    dest: '{{ duplicity_workspace }}/'
#    copy: no
#  when: duplicity_version != duplicity_current_version
#

- name: 'Unarchive duplicity-latest.tar.gz'
  register: duplicity_unarchive
  unarchive:
    src: '{{ fasteners_download_url }}'
    dest: '{{ fasteners_workspace }}/'
    copy: no
  when: duplicity_version != duplicity_current_version

- name: 'Output duplicity_unarchive'
  debug: msg="{{ duplicity_unarchive }}"

- name: stop duplicity (if exists) in case of updates
  when: duplicity_unarchive.changed
  service:
    name: 'duplicity'
    state: stopped
  ignore_errors: true
  tags: ['skip_ansible_lint']

- name: 'Copy'
  command: cp -f {{ duplicity_unarchive_dir }}/bin/duplicity /usr/local/bin/duplicity
  when: duplicity_unarchive.changed
  tags: ['skip_ansible_lint']

- name: 'Set duplicity default'
  copy:
    src: etc/default/duplicity
    dest: /etc/default/duplicity
    owner: root
    group: root
    mode: 0644

- name: 'Set init script'
  copy:
    src: duplicity.initd
    dest: /etc/init.d/duplicity
    owner: root
    group: root
    mode: '0755'
  when: ansible_distribution == 'Ubuntu'

- name: 'Set upstart script'
  copy:
    src: duplicity.upstart
    dest: /etc/init/duplicity.conf
    owner: root
    group: root
    mode: '0644'
  notify: reload initctl
  when: ansible_distribution == 'Ubuntu'

- name: 'Set systemd unit file'
  copy:
    src: duplicity.service
    dest: /lib/systemd/system/duplicity.service
    owner: root
    group: root
    mode: '0644'
  notify: reload systemd
  when: ansible_distribution == 'Debian'

- name: Install ruby if slack notification requested
  apt:
    pkg: 'ruby'
    state: present
  when: duplicity_use_slack

- name: set slack script
  template:
    src: notify/slack.rb
    dest: "{{ duplicity_slack_script }}"
    owner: root
    group: root
    mode: 0755
  when: duplicity_use_slack
